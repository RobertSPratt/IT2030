#+TITLE: Chapter 05 - How to manually test and debug an ASP.NET Core web app

* How to test an ASP.NET Core web app
- the goal of testing an app is to find all of the errors
- to /debug/ an app is to determine the cause of any errors
** How to run a web app
- to change the default browser, display the Start drop-down menu by clicking on its arrow
  + then, display the Web Browser menu and select a browser from it
- how to run an app with debugging
  + press `F5`
  + click the start button in the Standard toolbar
  + press Debug -> Start Debugging
- how to stop debugging
  + press `Shift`+`F5`
  + click the Start button in the Standard toolbar
  + select Debug -> Stop Debugging
- how to run an app in multiple browsers
  + to run an app in two or more browsers, select Browse With from the Start drop-down menu
    - then, in the resulting dialog, hold down the `Ctrl` key, select the browsers you want to use, and click the Browse button
  + when running an app in more than one browser, the app is running without debugging
** How to use the browser's developer tools
- most browsers provide /developer tools/ that let you view the HTML elements and CSS styles that are rendered by the web server
  + the /developer tools/ of the major browsers provide some excellent debugging features, like viewing the HTML elements rendered by the web server and viewing the styles appllied to those HTML elements
- to open and close the developer tools in Chrome, Firefox, and Edge
  + to open, press `F12`, or right-click an element in the page and select Inspect
  + to close, press `F12`, or click the X in the upper right corner of the tools panel
- how to open and close the developer tools in Opera and Safari
  + to open, right click an element in the page and select Inspect Element
  + to close, click the X in the upper right corner of the tools panel
  + in Safari, you must enable the developer tools before you can use them
    - to do that, select Preferences, click the Advanced tab, and then select the "Show Develop menu" item
- how to view the rendered HTML and CSS styles
  + open the appropriate panel by clicking on its tab
    - in Firefox, it's called the Inspector tab
    - in Chrome, Safari, and Opera, it's called the Elements tab
  + expand the nodes to navigate to the element you want, and then click that element
  + the HTML elements for a page are typically shown in the top of the panel, and the CSS styles for the selected element are typically shown below the HTML elements
** How to use the Internal Server Error page
- an /exception/ is an error that may occur when an app is run
  + if an exception occurs and isn't handled, the app can't continue
- during development, if an exception occurs, ASP.NET Core typically stops the app and sends an Internal Server Error page to the browser
  + this can be replaced with a user-friendly page designed for end users when the app is ready to be deployed
- by default, the Internal Server Error page selects the Stack link to display a /stack trace/
  + a /stack trace/ is a list of the methods that were active when the exception occurred
  + information about the current request can also be displayed by clicking the Qurey, Cookies, Headers, and Routing links
** How to use the Exception Helper
- when running an app with debbugging when an exception occurs, the debugger stops on the line of code that caused the exception and displays the Exception Helper
- the Exception Handler provides the name and description of the exception and points to the statement that caused it
  + it also includes links to view the details, copy the details, or start a Live Share session
  + it often provides all of the information needed to determine the cause of the exception
- since the Exception Helper is a non-modal dialog box, code can be edited while it is open
- to close the Exception Helper, click the X in its upper right corner
  + then, it can be opened again by clicking on the exception icon, displayed to the right of the statement that caused the exception
- if the program is continued after an exception occurs, by either pressing `F5` or clicking on the continue button, ASP.NET Core terminates the app and sends an error page to the browser
* How to use the debugger
** How to use breakpoints
- when VS encounters a /breakpoint/ it enters /break mode/ befor it executes the statement on which the breakpoint is set
- breakpoints can be set and removed before the app is ran or while in break mode
- breakpoings can only be set on a line that contains an executable statement
- how to set and remove breakpoints
  + to set a breakpoint, click in the margin indicator bar to the left of the line number for a statement
    - this highlights the statement and adds a breakpoint indicator (a red dot) in the margin
  + to remove a breakpoint, click the breakpoint indicator
  + to remover all breakpoints, select Debug -> Delete All Breakpoints
- how to enable and disable breakpoints
  + to enable or disable a breakpoint, point to the breakpoint indicator and select Enable/Disable Breakpoint from the resulting menu
  + to disable all breakpoints, select Debug -> Disable All Breakpoints
  + to enable all breakpoints, select Debug -> Enable All Breakpoints
  + to display the Breakpoints window, select Debug -> Windows -> Breakpoints
    - this window is most useful for enabling existing breakpoints
** How to work in break mode
- in break mode, the debugger highlights the next statement to be executed
  + then, the debugging window and the buttons in the Debug menu and toolbar can be used to control the execution of the program and determine the cause of an exception
- to display the value of a variable or property in a /data tip/, position the mouse pointer over the variable or property in the Code Editor window
  + the pin icon can also be used to the right of a data tip to pin the data tip so it remains displayed
- commands in the Debug menu and toolbar
| Command        | Keyboard       | Function                                                  |
|----------------+----------------+-----------------------------------------------------------|
| Start/Continue | F5             | start or continue execution of the app                    |
| Break All      | Ctrl+Alt+Break | stop execution and enter break mode                       |
| Stop Debugging | Shift+F5       | stop debugging and end execution of the app               |
| Restart        | Ctrl+Alt+F5    | restart the entire app                                    |
| Step Into      | F11            | execute one statement at a time                           |
| Step Over      | F10            | execute one statement at a time except for called methods |
| Step Out       | Shift+F11      | execute the remaining lines in the current method         |
- to display the numbers of an array, structure, or object in a data tip, position the mouse pointer over it to display its data tip, and then point the arrow to the left of the data tip
- the Step Into, Step Over, and Step Out commands can be used to execute one or more statements and return to break mode
- to stop an app that's caught in a loop, use the Debug -> Break All command
** How to monitor variables and expressions
- how to use the Locals, Autos, and Watch windows
  + the Locals window displays information about the variables within the scope of the current method
  + the Autos window works like the Locals window, but it only displays information about variables used by the current statement and the previous statement
  + the Watch windows let you view the values of variables and expressions that you specify, called /watch expressions/
    - to add a watch expressoin, type a variable name or expression into the Name column
    - to delete a row from a Watch window, right-click the row and select Delete Watch
- how to use the Immediate window
  + to display the current value of a variable or expression, type a question mark followed by a variable name or expression and press enter
  + to execute a statement, type the statement and press enter
  + to execute an existing command, press the Up or Down arrow until you have displayed the command and press enter
  + to remove all command and output, right-click the window and select Clear-All
- to display these Windows, if the window's tab is visible, click the tab
  + otherwise, select the window from the Debug -> Windows menu
** How to use tracepoints
- VS also provides a feature called /traecepoints/
  + a tracepoint is a special type of breakpoint that performs an action when it's encountered
  + they are typically used to log messages; which can include text, variables, expressions, and special keywords; to the Output window
  + are marked with a red triangle by VS
- to set a new tracepoint, right-click a statement and select Breakpoint -> Insert Tracepoint and then complete the Breakpoint Settings window
- to convert an existing breakpoint to a tracepoint, point to the breakpoint icon, click the Settings icon that looks like a gear, and complete the Breakpoint Settings window
- for a tracepoint, the Breakpoint Settings window should have the continue Execution option selected
  + this prevents it from entering berak mode like a breakpoint
- when logging a message to the Output window, you can include the value of a variable or other expression by placing it inside curly braces
  + special keywords such as `Function` by coding a `$` followed by the keyword
