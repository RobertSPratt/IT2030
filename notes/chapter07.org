#+TITLE: Chapter 07 - How to work with Razor views
* How to use Razor syntax
** How to work with code blocks and inline expressions
- the syntax for a Razor code blocks
  #+begin_src java
  @{
    // one or more C# statements
  }
  #+end_src
- the syntax for an inline expression
  #+begin_src java
  @(csharp_expression)
  #+end_src
- a controlled action method that sets up data for a view
  #+begin_src java
  public IActionResult Index()
  {
    ViewBag.CustomerName = "John";
    return View(); //returns Views/Home/Index.cshtml
  }
  #+end_src
- parentheses are not needed for an inline expression if it only shows the value of a variable or property
- in general, it is considered best practice to perform arithmetic calculations in the view controller or model and pass it to the view
- to execute one or more C# statements, a Razor /code block/ must be declared with the `@` sign followed by a pair of `{}`
  + within the curly braces, C# statements can be coded
** How to code inline loops
- a for loop that displays a drop-down list of month numbers
  #+begin_src java
  @for (int month = 1; month <= 12; month++)
  {
    <option value="@month">@month</option>
  }
  #+end_src
- code in a controller that creates a list of strings
  #+begin_src java
  public IActionResult Index()
  {
    ViewBag.Categories = new List<string>
    {
        "Guitars", "Basses", "Drums"
    };
    return View();
  }
  #+end_src
- a foreach loop that displays a list of links
  #+begin_src java
  @foreach (string category in ViewBag.Categories)
  {
    <div>
        <a href="/Product/List/@category/">@category</a>
    </div>
  }
  #+end_src
- /inline loops/ can be coded within a view
  + within these, HTML tags can be used to send HTML to the view
** How to code inline conditional statements
- an if-else statement in a view
  #+begin_src java
  @if (ViewBag.ProductID == 1)
  {
    <p>Fender Stratocaster</p>
  }
  else if (ViewBag.ProductID == 2)
  {
    <p>Gibson Les Paul</p>
  }
  else
  {
    <p>Product Not Found</p>
  }
  #+end_src
- a switch statement in a view
  #+begin_src java
  @switch (ViewBag.ProductID)
  {
    case 1:
        <p>Fender Stratocaster</p>
        break;
    case 2:
        <p>Gibson Les Paul</p>
        break;
    default:
        <p>Product Not Found</p>
        break;
  }
  #+end_src
- an if statement that adds a Bootstrap CSS class if true
  #+begin_src html
  <a asp-controller="Product" asp-action="List" asp-route-id="ALL"
        class="list-group-item
        @if (ViewBag.SelectedCategoryName == "All") {
            <text>active</text>
        }">
        All
  </a>
  #+end_src
- an /inline conditional expression/ that adds a Bootstrap CSS class if true
  #+begin_src html
  <a asp-controller="Product" asp-action="List" asp-route-id="All"
        class="list-group-item
        @(ViewBag.SelectedCategoryName == "All" ? "active" : "")">
        All
  </a>
  #+end_src
- /inline conditional statements/ can be coded within a view
  + these statements can use HTML tags to send HTML to the view
- the `<text>` can be used to send plain text to a view
  + this is useful for sending part of an HTML tag such as an HTML attribute or its value
- /inline conditional expressions/ can be coded using the ternary conditional operator
* Essential skills for Razor views
** The starting folders and files for an app
- by convention, views for an app are stored in a series of folders and files whose names correspond to the controllers and action methods that return the views
- the Startup.cs file typically contains code that configures the middleware for the app, including the routing that specifies how controllers and their action methods are mapped to URLs
- the Program.cs file sets up the app, including defining the Startup class
- the starting folders and filed fo a guitar shop app
  #+begin_src html
  GuitarShop
    /Controllers
        /HomeController.cs
        /ProductController.cs
    /Models
        /Category.cs
        /Product.cs
    /Views
        /Home
            /Index.cshtml   -- the view for the Home/Index action
            /About.cshtml   -- the view for the Home/About action
        /Product
            /List.cshtml    -- the view for the Product/List action
            /Details.cshtml -- the view for the Product/Details action
            /Update.cshtml  -- teh view for the Product/Update action
        /Shared
            /_Layout.cshtml -- a layout that can be shared by views
        _ViewImports.cshtml -- imports models and tag helpers for views
        _ViewStart.cshtml   -- specifies the default layout for views
    /wwwroot
        /css
            /custom.css
        /lib
            /boostrap/cs/boostrap.min.css
    Startup.cs              -- configures middleware that may impact views
    Program.cs              -- sets up the app
  #+end_src
** How to code controllers that return views
- a method that a controller can use to return a view result to the browser
| Method     | Description                                                                                          |
|------------+------------------------------------------------------------------------------------------------------|
| View()     | creates a ViewResult object that corresponds to the name of the current controller and action method |
| View(name) | cerates a ViewResult object that corresponds to the current controller and the specified view name   |
- a controller typically contains action methods that are mapped to the view files in the Views folder
** How to create a default layout and enable tag helpers
- how to add a Razor layout, view start, or view imports file
  1. right-click on the folder where you want to add the filer, select the Add->New Item item
  2. in the resulting dialog, select the ASP.NET Core->Web category
  3. select the Razor item you want to add and respond to the resulting dialog boxes
- to specify code that's shared between multiple view files, add a Razor layout to the Views/Shared folder of your project
- within a Razor layout, the ViewBag or ViewData property is often used to display a title thta's set in the view
- witihn a Razor layout, the RenderBody() method renders the body of the view
- to specify a default layout for all views, add a _ViewStart file to the Views folde of the project and set the Layout property to the name of the Razor layout
  #+begin_src java
  @{
    Layout = "_Layout";
  }
  #+end_src
- to enable all ASP.NET Core MVC tag helpers for all views, add a _ViewImports file to the Views folder of the project
  #+begin_src java
  @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
  #+end_src
** How to use tag helpers to generate URLs for links
- in general, it's considered best practice to use tag helpers to generate the URL for a link
- three tag helpers to generate URLs
| Tag helper          | Description                                                                                                                                                                                                                                                                               |
|---------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| asp-controller      | specifies the contoller; only neccessary if a URL for an action methor from another controller is wanted                                                                                                                                                                                  |
| asp-action          | specifies the action method                                                                                                                                                                                                                                                               |
| asp-rout-param_name | specifies a route parameter where param_name is the name of the parameter; if a name that exists in one of the app's rouse is specified, the app uses the value as a segment of the URL, otherwise it adds the paramater name and value to the end of the URL as part of its query string |
- two ways to code the same link
  + use HTML to hard code the URL in the href attribute
    #+begin_src html
    <a href="/Product/List/Guitars">View guitars</a>
    #+end_src
  + use ASP.NET tag helpers to generate the URL
    #+begin_src html
    <a asp-controller="Product" asp-action"List" asp-route-id="Guitars">View guitars</a>
    #+end_src
- how to code a link to an action method in a different controller
  #+begin_src html
  <a asp-controller="Product" asp-action="List">View all products</a>
  #+end_src
- how to code a link that includes a parameter that's in a route
  #+begin_src html
  <a asp-controller="Product" asp-action="List" asp-route-id="Guitars">View guitars</a>
  #+end_src
- a link that specifies a route parameter that doesn't exist
  #+begin_src html
  <a asp-controller="Product" asp-action="List" asp-route-page="1" asp-route-sort_by="price"> Products - Page 1</a>
  #+end_src
  + the URL that's generated: /Product/List?page=1&sort_by=price
** Three views that use the default layout
- if the Razor code block at the top of the page doesn't set the Layout property, these views use the layout (_Layout) that's specified by the _ViewStart file
* More skills for Razor views
** More tag helpers for generating URLs for links
| Tag helper   | Description                                                                                                                        |
|--------------+------------------------------------------------------------------------------------------------------------------------------------|
| asp-area     | specifies the area for the URL                                                                                                     |
| asp-fragment | specifies the placeholder that you want to jump to                                                                                 |
| asp-protocol | specifies the protocol, set to HTTP by default; it's common for apps to automatically redirect to HTTPS, even if HTTP is specified |
| asp-host     | specifies the name for the host server                                                                                             |
- a URL /fragment/ allows you to jump to a specified placeholde on a web page
  + in a URL, a fragment is preceded by the has mark (`x`)
- a /relative URL/ is one that's relative to the app's root directory
- an /absolute URL/ is one that specifies the host
- relative URLs are more flexible than absolute URLs because they allow the app to work on multiple hosts
  + as a result, absolute URLs should only be used when coding a link to a specific host outside of the app
** How to format numbers in a view
- in a Razor expression, C#'s format specifiers can be used to format a number as currency or a percent
  + one way to do this is to call the ToString() method from the numeric data type and pass it the format specifier
- format specifiers used to format numbers
| Specifier | Name     | Description                                                   |
|-----------+----------+---------------------------------------------------------------|
| C         | currency | formats a number as a currency value for the current locale   |
| N         | number   | formats a number using a separator for the thousandths places |
| P         | percent  | formats a number as a percent                                 |
- by default, the format specifiers return two decimal places, but the number can be specified by adding a value after the specifier
- if necessary, the format specifiers round numbers to the nearest decimal place
* How to work with a model
** How to pass a model to a view
- a /model/ is a regular C# class that defines and object
- in a controller, the View() method can be used to pass a model object to a view
  + a method that a controller can use to pass a model to a view
| Method            | Description                                                                                    |
|-------------------+------------------------------------------------------------------------------------------------|
| View(model)       | passes the specified model to the corresponding view and creates a ViewResult object           |
| View(name, model) | passes the specified model to the view with the specified name and creates a ViewResult object |
** How to display model properties in a view
- in a view, the @model directive is used to bind a model to a view
  + after that, the Model property is used to access the properties and methods of the model object
- a directive and a property used to display model properties in a view
| Razor syntax | Description                                                                                    |
|--------------+------------------------------------------------------------------------------------------------|
| @model       | a directive that specifies the data type (class) for the model and binds the model to the view |
| @Model       | accesses the built-in Model property that accesses the model object that's bound to the view   |
** How to bind model properties to HTML elements
- in a form, the asp-for tag helper is typically used to bind model properties to HTML elements such as the <label> and <input> elements
** How to bind a list of items to a <select> element
- the as-items tag helper can be used to bind items to a <select> element
  + this creates the <option> elements for the <select> element
- the construct for the SelectList class: SelectList(list, value, text, selectedValue)
  + it specifies the enumerable collection that contains the objects for each item, an optional property name that specifies the data value for the item, and an optional value that specifies the value of the selected item
* How to work with Razor layouts
** How to create and apply a layout
- a project can contain multiple Razor layouts, allowing different views to use different layouts
** How to nest layouts
- to avoid code duplication, layouts can be built by nesting one within another
** How to use view context
- a layout can use the ViewContext property to get data bout the route of the current view
  + then, it can use this data to perfom tasks such as setting the active navigation link
** How to use sections
- within a view, Razor code can be used to specify a /section/, which is a block of content that has a name
- within a layout, the RenderSection() method can be used to insert the content from a section into the layout: RenderSection(name, isRequired)
  + inserts the content from the section within the specified name into the layout
  + if the section is required, all views must include a section with the specified name or attempting to view the page will result in an error
- sections are commonly used to insert <script> elements for additional JavaScript files into a layout
  + that way, the views that need those files can insert them into the layout, and the views that don't need them don't insert anything into the layout
