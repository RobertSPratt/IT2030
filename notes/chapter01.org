#+TITLE: An introduction to web programming with ASP.NET Core MVC

* An introduction to web apps
- a /web app/, also known as a /web application/, consists of a set of /web pages/ that are generated in response to user requests
  + search engines, online stores, news sites, social sites, music streaming, video streaming, and games are examples of web apps
** The components of a web app
- web apps consist of /clients/ and a /web server/
  + clients are computers and mobile devices that often access the web pages through /web browsers/
  + web servers hold the files that generate the pages of a web app
- a /network/ is a system that allows clients and servers to communicate
- the /Internet/ is a large network that consists of many smaller networks
- networks can be catagorized by size:
  + a /local area network (LAN)/ is a small network of computers that are near each other and can communicate with each other over short distances
    - computers in a LAN are typically in the same building or in adjacent buildings
    - this is also often called an /intranet/
  + a /wide area network (WAN)/ consists of multiple LANs that have been connected
    - to pass informatin from one client to another, a router determines which network is closest to the destination and sends the informatin over that network
    - a WAN can be owned privately by one company or it can be shared by multiple companies
    - an /Internet Service Provider (ISP)/ is a company that owns a WAN that is connected to the Internet
      + An ISP leases access to its network to companies that need to be connected to the Internet
- a /Uniform Resource Locator (URL)/ is typed into the browser's address area to access a webpage
  + the URL starts with the /protocol/, usually HTTPS
  + the protocal is followed by the /domain name/ and the folder or directory /path/ to the fle that is requested
    - if the filename is omitted from the URL, the web server looks for a default file in the specified directory
      + default files usually include `index.htl`, `index.htm`, `default.html`, and `default.htm`
** How static web pages are processed
- a /static web page/ is stored in a file that contains hard-coded content that doesn't change each time it is requested
  + this type of page is sent directly from the web server to the web browser when requested
    - if a page's extension ends in `.html` or `.htm`, it is probably a static page
- the request sent by the browser to the web server is called an /HTTP request/, formatted using /Hypertext Transfer Protocol (HTTP)/
  + for secure communication, most web apps use an extension of HTTP known as /Hypertext Transfer Protocol Secure (HTTPS)/
- when the web server receives the HTTP request, it retrieves the requested file from the disk drive
  + this file contains the /Hypertext Markup Language (HTML)/ for the requested page
    - with references to any CSS or JavaScript files needed by the page
  + then, the web server sends the HTML, CSS, and JavaScript back to the browser as part of an /HTTP response/
- when the browser receives the HTTP response, it /renders/ the HTML, CSS, and JavaScript into a web page that is displayed in its viewport
** How dynamic web pages are processed
- a /dynamic web page/ is one that is generated by a program on an /application server/
  + this program uses the data that's sent with the HTTP request to generate the HTML that gets returned
- when the browser sends its HTTP request, it includes whatever data the user has given that is necessary for processing the request
- when the web server receives the HTTP request, it examines the request to identify the application server that should process the request
  + forwarding the request to the appropriate application server
- the application server then retrieves the appropriate program
  + it loads any data that the user submitted and executes the program.
  + as the program executes, it generatse HTML, CSS, and JavaScript for the web page
    - if necessary, it will also request and use data from a database server as part of the page that it is generating
- once finished, the application server sends the dynamically generated HTML back to the web server, which then sends the HTML, CSS, and JavaScript back to the browser
- finally, the browser generates the page just as it would a static page--there is no difference here between a static or dynamic page
- the process of a user requesting a page and the page being returned to the client is referred to as a /round trip/
- ASP.NET Core apps use ASP.NET Core as the application server
  + they typically use a cross-platform web server known as /Kestrel/ and a /DBMS/ named Microsoft SQL Server running on the database server
- Prior to ASP.NET Core, ASP.NET apps typically used a Windows-only web server known as /Internet Information Services (IIS)/
** An introduction to the MVC pattern
- the /Model-View-Controller (MVC) pattern/ is comminly used to structure web apps that have significant processing requirements
  + most modern web development frameworks today use some form of the MVC pattern
- it divides an app into separate components where each component has a specific area of concern
  + this is known as /separation of concerns/
- although requiring more work to set up an app like this, it leads to many benefits:
  + it makes it easier to have different members of a team work on different components
  + it makes it possible to automate testing of individual components
  + makes it possible to swap out one component for another component
- the /model/ is in charge of data
  + specifically, it gets and updates the data in a data store such as a database, applies business rules to the data, and validates the data
- the /view/ is in charge of the user interface
  + specifically, it creates the HTML, CSS, and JavaScript that the app sends to the browser in response to the browser's HTTP request
- the /controller/ is in charge of controlling the flow of data between the model and the view
  + specifically, it receives the HTTP request from the browser, determines what data to get from the model, and then sends the data from the model to the appropriate view
- each component should stick to its own area of concern and be as independent as possible
* An introduction to ASP.NET Core MVC
** Three ASP.NET programming models for web apps
- Since 2002 Microsoft has developed many ASP.NET programming models, with three being the most popular
  + Web Forms is the oldest and most established of the three
  + Core MVC is the newest and most cutting edge
- information on the internet sometimes uses the old names and version numbers that were used during development, not official names and numbers of the final release
- there are breaking changes between ASP.NET and ASP.NET Core and between different versions of ASP.NET Core, such as between 2.0 and 3.0
*** ASP.NET Web Forms
- released in 2002
- provides for /Rapid Application Development (RAD)/ by letting developers build web pages by working with a design surface in a way that's similar to Window's Forms
- has many problems, including poor performance, inadequate separation of concerns, lack of support for automated testing, and limited control over the HTML/CSS/JavaScript that's returned to the browser
- uses the ASP.NET Framework, which is proprietary and only runs on Windows
*** ASP.NET MVC
- released in 2007
- uses the MVC pattern that's used by many other web development platforms
- fixes many of the perceived problems with web forms to provide better performance, separation of concerns, suport for automated testing, and a hight degree of control over the HTML/CSS/JavaScript that's returned to the browser
- uses the same proprietary, Windows-only ASP.NET Framework as Web Forms
*** ASP.NET Core MVC
- released in 2015
- uses a service to implement the MVC pattern that's used by many other web development platforms
- provides all of the functionality of ASP.NET MVC but with better performance, more modularity, and cleaner code
- is build on the open-source ASP.NET Core platform that can run on multiple platforms, including Windows, MacOS, and Linux
** Some web components of .NET and .NET Core
- there are several important differences between .NET and .NET Core
  + specifically, the .NET Core platform is open source and supports multiple operating systems, including Windows, MacOS, and Linux
    - the .NET Framework is proprietary and only supports the Windows operating system
  + the .NET Framework supports all three programming models described above
    - the .NET Core platform only uspports the ASP.NET Core MVC
- for new development and for apps to run on Linux servers, they should be made using .NET Core
  + if the app needs to use components from the .NET Framework, then it should be used
** An introduction to ASP.NET Core middleware
- ASP.NET Core apps allow you to configure the /middleware/ components that ar in the HTTP request and response /pipeline/
  + middleware components modify the HTTP request and response before passing it to the next component in the pipeline
- an ASP.NET Core app typically has a number of middleware components configures such as
  + static files middleware
  + authentication middleware
  + endpoint routing middleware
** How state works in a web app
- /state/ refers to the current status of the properties, variables, and other data maintained by an app for a single user
  + as an app runs, it must maintain a separate state for each user currently accessing the app
- HTTP is a /stateless protocol/, unlike some others
  + this means that it doesn't keep track of the state between round trips
  + once a browser makes a request and receives a response, the app terminates and its state is lost
    - as a result, when the web browser makes a subsequent request, the web server has no way to associate the current request with the previous request
  + ASP.NET Web Forms attempted to hide the stateless nature of a web app from developers by automatically maintaining state
    - this often resulted in large amounts of data being transferred with each request and response, leading to poor performance
  + ASP.NET Core MVC does not attempt to hide the stateless nature of a web app
    - instead, it provides features to handle state in a way that gives developers control over each HTTP request and response
      + this can lead to excellent performance when used wisely
* Tool for working with ASP.NET Core MVC apps
** An introduction to Visual Studio
- /Visual Studio (VS)/ is the most popular IDE for developing ASP.NET Core apps
  + Microsoft provides a Community Edition that's available for free and runs on Windows and MacOS
** An introduction to Visual Studio Code
- /Visual Studio Code (VS Code)/ is a /code editor/ that's becoming popular with Microsoft developers
  + like VS, VS Code can be used to develop all types of .NET apps, including ASP.NET Core apps
- since it doesn't provide as many features as an IDE like VS, some find VS Code easier to use
  + in addition, VS Code typically starts and runs faster than VS, especially on slower computers
- when using VS Code, it Terminal window can be used to use a /command line/ to enter and execute the commands that build and run an app
* How an ASP.NET Core MVC app works
** How coding by convention works
- ASP.NET Core MVC uses a sofware design paradigm known as /convention over configuration/, or /coding by convention/
  + this reduces the amount of configuration that developers need to do if they follow certaion conventions
- the top-level folder for a web app is known as its /root folder/, or /root directory/
  + in this folder, .cs files are typically used to store the C# classes that define controllers and models
- all controller classes should be stored in a folder named Controllers or one of its subfolders
  + while not required, it is standard convention to name controller filers with the "Controller" suffix for quick reference
- all model classes should be stored in a folder named Models or one of its subfolders
- all view files should be stored in a folder named Views or one of its subfolders
  + in addition, the subfolders of the Views folder should correspond to the controller classes
  + the view files (.cshtml files) contain /Razor views/ that define views for the app
- all static files, such as image files, CSS files, and JavaScript files should be stored in a folder named wwwroot
  + the static files for an app can include CSS libraries such as Bootstrap or JavaScript libraries such as jQuery or custom CSS/JS files to overide code in these libraries
** How a controller passes a model to a view
- in ASP.NET Core MVC, a /model/ is a C# class that defines the data objects and business rules for the app
- a controlled is a C# class that tjpically inherits the Microsoft.AspNetCore.Mvc.Controller class
- in ASP.NET Core MVC, an /action/ is a method of a controller that returns an /action result/
  + to do that, a method can use the built-in View() method to return a type of action result known as a /view result/ that's created by merging the model into the HTML code specified in the view file
** How a view uses Razor code, tag helpers, and Bootstrap CSS classes
- most of a typical view file consists of HTML elements
- a view file can also contain /RAzor code/ that allows you to use C# to get data from the model, format it, and display it
  + Razor code begins with an @ sign
- the @model directive specifies the class for the model
  + the @Model property allows access to a model object that's created from the specified classt
- @{} is used to identify a block of C# statements
  + if necessary, this could contain multiple C# statements
- all HTML attributs within a view that start with "asp-" are /tag helpers/
  + these make it easier to code HTML attributes
- in a view, it's common to use the class attribute of an HTML element to specify CSS classes from Bootstrap
  + Bootstrap is often used with ASP.NET Core MVC
